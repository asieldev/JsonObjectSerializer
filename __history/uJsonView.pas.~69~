unit uJsonView;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs,
  FMX.Controls.Presentation, FMX.StdCtrls, uJsonObjectSerializer, FMX.Layouts, FMX.Memo,
  FMX.TabControl;

type

  TSubProduto = class
  private
    FName: string;
    FId: Integer;
  published
    property Id: Integer read FId write FId;
    property Name: string read FName write FName;
  end;

  TProduto = class
    FId: Integer;
    FName: string;
    FPrice: Double;
    FActivo: Boolean;
  private
    FSubProduto: TSubProduto;
  public
    property Id: Integer read FId write FId;
    property Name: string read FName write FName;
    property Price: Double read FPrice write FPrice;
    property Activo: Boolean read FActivo write FActivo;
    property SubProduto: TSubProduto read FSubProduto write FSubProduto;
  end;

  TGrupo = class
  private
    FCodigo: Integer;
    FPessoa: String;
  published
    property codigo: Integer read FCodigo write FCodigo;
    property pessoa: String read FPessoa write FPessoa;
  end;

  TMotorista = class
  private
    FCodigo: Integer;
    FTransportador: Integer;
    FSindicato: Integer;
    FGrupos: TArray<TGrupo>;
  public
    property codigo: Integer read FCodigo write FCodigo;
    property transportador: Integer read FTransportador write FTransportador;
    property sindicato: Integer read FSindicato write FSindicato;
    property grupos: TArray<TGrupo> read FGrupos write FGrupos;

  end;

  TDados = class
  private
    FNome_Mot: string;
    FEscala: string;
  published
    property nome_mot: string read FNome_Mot write  FNome_Mot;
    property escala: string read FEscala write  FEscala;
  end;

  TJornada = class
  private
    FMotorista: TMotorista;
    FDados: TDados;
  published
    property motorista: TMotorista read FMotorista write FMotorista;
    property dados: TDados read FDados write FDados;
  end;


  TForm1 = class(TForm)
    tbControl: TTabControl;
    mmoJsonToArray: TMemo;
    btnJsonToArray: TButton;
    btnJsonToObject: TButton;
    mmoJsonToObject: TMemo;
    tbtm1: TTabItem;
    tbtm2: TTabItem;
    mmoObjectToJson: TMemo;
    btnObjectToJson: TButton;
    mmoObjectToArray: TMemo;
    btnObjectToArray: TButton;
    procedure btnJsonToObjectClick(Sender: TObject);
    procedure btnJsonToArrayClick(Sender: TObject);
    procedure btnObjectToJsonClick(Sender: TObject);
    procedure btnObjectToArrayClick(Sender: TObject);
  private
    { Private declarations }
  public
    Productos: TArray<TProduto>;
  end;

var
  Form1: TForm1;
  Produto: TProduto;
  Produtos: TArray<TProduto>;
  Jornada: TJornada;
  Jornadas: TArray<TJornada>;

implementation

{$R *.fmx}


procedure TForm1.btnJsonToObjectClick(Sender: TObject);
begin
//  if mmoJsonToObject.Text <> EmptyStr then
//  begin
//    Produto:= TJsonObjectSerializer<TProduto>.JsonToObject(mmoJsonToObject.Text);
//
//    if Produto <> nil then
//      if Produto.Activo then
//      begin
//        ShowMessage(Format('Produto: %d, %s, %0.2f', [Produto.Id, Produto.Name, Produto.Price]));
//        ShowMessage(Format('Produto: %d, %s' ,[Produto.SubProduto.Id, Produto.SubProduto.Name]))
//      end
//      else
//        ShowMessage('Produto no Ativo');
//  end
//  else
//    ShowMessage('Json nulo');


  if mmoJsonToObject.Text <> EmptyStr then
  begin
    Jornada:= TJsonObjectSerializer<TJornada>.JsonToObject(mmoJsonToObject.Text);
  end
  else
    ShowMessage('Json nulo');

end;

procedure TForm1.btnJsonToArrayClick(Sender: TObject);
var
  ProdutoValue: TProduto;
  JornadaValue: TJornada;
begin
//  if mmoJsonToArray.Text <> EmptyStr then
//  begin
//    Produtos:= TJsonObjectSerializer<TProduto>.JsonStringToObjectArray(mmoJsonToArray.Text);
//
//    if Length(Produtos) > 0 then
//      for ProdutoValue in Produtos do
//      begin
//        ShowMessage(Format('Produto: %d, %s, %0.2f', [ProdutoValue.Id, ProdutoValue.Name, ProdutoValue.Price]))
//      end;
//  end
//  else
//    ShowMessage('Json nulo');

  if mmoJsonToArray.Text <> EmptyStr then
  begin
    Jornadas:= TJsonObjectSerializer<TJornada>.JsonStringToObjectArray(mmoJsonToArray.Text);

    if Length(Jornadas) > 0 then
      for JornadaValue in Jornadas do
      begin
        ShowMessage(Format('Jornadas: %d, %d, %d', [JornadaValue.motorista.codigo, JornadaValue.motorista.sindicato, JornadaValue.motorista.transportador]))
      end;
  end
  else
    ShowMessage('Json nulo');
end;


procedure TForm1.btnObjectToArrayClick(Sender: TObject);
begin
//  if Length(Produtos) > 0 then
//    mmoObjectToArray.Text:=  TJsonObjectSerializer<TProduto>.ArrayToJson(Produtos)
//  else
//    ShowMessage('Array de Produtos vacío');
end;

procedure TForm1.btnObjectToJsonClick(Sender: TObject);
begin
  if not Assigned(Produto) then
    Produto:= TProduto.Create;

  mmoObjectToJson.Text:= TJsonObjectSerializer<TProduto>.ObjectToJsonString(Produto);

//  if not Assigned(Jornada) then
//    Jornada:= TJornada.Create;
//
//  mmoObjectToJson.Text:= TJsonObjectSerializer<TJornada>.ObjectToJsonString(Jornada);
end;
end.
